// Code generated by mockery v2.14.1. DO NOT EDIT.

package reliable

import (
	rmqworker "github.com/matrixbotio/rmqworker-lib"
	mock "github.com/stretchr/testify/mock"
)

// MockHandlerCallback is an autogenerated mock type for the MessageHandler type
type MockHandlerCallback struct {
	mock.Mock
}

type MockHandlerCallback_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHandlerCallback) EXPECT() *MockHandlerCallback_Expecter {
	return &MockHandlerCallback_Expecter{mock: &_m.Mock}
}

// HandleMessage provides a mock function with given fields: w, deliveryHandler, request
func (_m *MockHandlerCallback) HandleMessage(w *rmqworker.RMQWorker, deliveryHandler *rmqworker.RMQDeliveryHandler, request interface{}) error {
	ret := _m.Called(w, deliveryHandler, request)

	var r0 error
	if rf, ok := ret.Get(0).(func(*rmqworker.RMQWorker, *rmqworker.RMQDeliveryHandler, interface{}) error); ok {
		r0 = rf(w, deliveryHandler, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockHandlerCallback_HandleMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleMessage'
type MockHandlerCallback_HandleMessage_Call struct {
	*mock.Call
}

// HandleMessage is a helper method to define mock.On call
//  - w *rmqworker.RMQWorker
//  - deliveryHandler *rmqworker.RMQDeliveryHandler
//  - request interface{}
func (_e *MockHandlerCallback_Expecter) HandleMessage(w interface{}, deliveryHandler interface{}, request interface{}) *MockHandlerCallback_HandleMessage_Call {
	return &MockHandlerCallback_HandleMessage_Call{Call: _e.mock.On("HandleMessage", w, deliveryHandler, request)}
}

func (_c *MockHandlerCallback_HandleMessage_Call) Run(run func(w *rmqworker.RMQWorker, deliveryHandler *rmqworker.RMQDeliveryHandler, request interface{})) *MockHandlerCallback_HandleMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*rmqworker.RMQWorker), args[1].(*rmqworker.RMQDeliveryHandler), args[2].(interface{}))
	})
	return _c
}

func (_c *MockHandlerCallback_HandleMessage_Call) Return(_a0 error) *MockHandlerCallback_HandleMessage_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewMockHandlerCallback interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockHandlerCallback creates a new instance of MockHandlerCallback. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockHandlerCallback(t mockConstructorTestingTNewMockHandlerCallback) *MockHandlerCallback {
	mock := &MockHandlerCallback{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
