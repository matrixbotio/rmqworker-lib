// Code generated by mockery v2.14.1. DO NOT EDIT.

package handler

import (
	errs "github.com/matrixbotio/rmqworker-lib/pkg/errs"
	mock "github.com/stretchr/testify/mock"
)

// MockRMQDeliveryHandler is an autogenerated mock type for the RMQDeliveryHandler type
type MockRMQDeliveryHandler struct {
	mock.Mock
}

type MockRMQDeliveryHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRMQDeliveryHandler) EXPECT() *MockRMQDeliveryHandler_Expecter {
	return &MockRMQDeliveryHandler_Expecter{mock: &_m.Mock}
}

// GetCorrelationID provides a mock function with given fields:
func (_m *MockRMQDeliveryHandler) GetCorrelationID() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockRMQDeliveryHandler_GetCorrelationID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCorrelationID'
type MockRMQDeliveryHandler_GetCorrelationID_Call struct {
	*mock.Call
}

// GetCorrelationID is a helper method to define mock.On call
func (_e *MockRMQDeliveryHandler_Expecter) GetCorrelationID() *MockRMQDeliveryHandler_GetCorrelationID_Call {
	return &MockRMQDeliveryHandler_GetCorrelationID_Call{Call: _e.mock.On("GetCorrelationID")}
}

func (_c *MockRMQDeliveryHandler_GetCorrelationID_Call) Run(run func()) *MockRMQDeliveryHandler_GetCorrelationID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRMQDeliveryHandler_GetCorrelationID_Call) Return(_a0 string) *MockRMQDeliveryHandler_GetCorrelationID_Call {
	_c.Call.Return(_a0)
	return _c
}

// GetMessageBody provides a mock function with given fields:
func (_m *MockRMQDeliveryHandler) GetMessageBody() []byte {
	ret := _m.Called()

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// MockRMQDeliveryHandler_GetMessageBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMessageBody'
type MockRMQDeliveryHandler_GetMessageBody_Call struct {
	*mock.Call
}

// GetMessageBody is a helper method to define mock.On call
func (_e *MockRMQDeliveryHandler_Expecter) GetMessageBody() *MockRMQDeliveryHandler_GetMessageBody_Call {
	return &MockRMQDeliveryHandler_GetMessageBody_Call{Call: _e.mock.On("GetMessageBody")}
}

func (_c *MockRMQDeliveryHandler_GetMessageBody_Call) Run(run func()) *MockRMQDeliveryHandler_GetMessageBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRMQDeliveryHandler_GetMessageBody_Call) Return(_a0 []byte) *MockRMQDeliveryHandler_GetMessageBody_Call {
	_c.Call.Return(_a0)
	return _c
}

// GetResponseRoutingKeyHeader provides a mock function with given fields:
func (_m *MockRMQDeliveryHandler) GetResponseRoutingKeyHeader() (string, errs.APIError) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 errs.APIError
	if rf, ok := ret.Get(1).(func() errs.APIError); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errs.APIError)
		}
	}

	return r0, r1
}

// MockRMQDeliveryHandler_GetResponseRoutingKeyHeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetResponseRoutingKeyHeader'
type MockRMQDeliveryHandler_GetResponseRoutingKeyHeader_Call struct {
	*mock.Call
}

// GetResponseRoutingKeyHeader is a helper method to define mock.On call
func (_e *MockRMQDeliveryHandler_Expecter) GetResponseRoutingKeyHeader() *MockRMQDeliveryHandler_GetResponseRoutingKeyHeader_Call {
	return &MockRMQDeliveryHandler_GetResponseRoutingKeyHeader_Call{Call: _e.mock.On("GetResponseRoutingKeyHeader")}
}

func (_c *MockRMQDeliveryHandler_GetResponseRoutingKeyHeader_Call) Run(run func()) *MockRMQDeliveryHandler_GetResponseRoutingKeyHeader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRMQDeliveryHandler_GetResponseRoutingKeyHeader_Call) Return(_a0 string, _a1 errs.APIError) *MockRMQDeliveryHandler_GetResponseRoutingKeyHeader_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewMockRMQDeliveryHandler interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockRMQDeliveryHandler creates a new instance of MockRMQDeliveryHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockRMQDeliveryHandler(t mockConstructorTestingTNewMockRMQDeliveryHandler) *MockRMQDeliveryHandler {
	mock := &MockRMQDeliveryHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
