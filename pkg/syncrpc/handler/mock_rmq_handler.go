// Code generated by mockery v2.14.1. DO NOT EDIT.

package handler

import (
	constants "github.com/matrixbotio/constants-lib"
	errs "github.com/matrixbotio/rmqworker-lib/pkg/errs"

	mock "github.com/stretchr/testify/mock"

	rmqworker "github.com/matrixbotio/rmqworker-lib"
)

// MockRMQHandler is an autogenerated mock type for the RMQHandler type
type MockRMQHandler struct {
	mock.Mock
}

type MockRMQHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRMQHandler) EXPECT() *MockRMQHandler_Expecter {
	return &MockRMQHandler_Expecter{mock: &_m.Mock}
}

// NewRMQWorker provides a mock function with given fields: task
func (_m *MockRMQHandler) NewRMQWorker(task rmqworker.WorkerTask) (*rmqworker.RMQWorker, errs.APIError) {
	ret := _m.Called(task)

	var r0 *rmqworker.RMQWorker
	if rf, ok := ret.Get(0).(func(rmqworker.WorkerTask) *rmqworker.RMQWorker); ok {
		r0 = rf(task)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rmqworker.RMQWorker)
		}
	}

	var r1 errs.APIError
	if rf, ok := ret.Get(1).(func(rmqworker.WorkerTask) errs.APIError); ok {
		r1 = rf(task)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errs.APIError)
		}
	}

	return r0, r1
}

// MockRMQHandler_NewRMQWorker_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewRMQWorker'
type MockRMQHandler_NewRMQWorker_Call struct {
	*mock.Call
}

// NewRMQWorker is a helper method to define mock.On call
//  - task rmqworker.WorkerTask
func (_e *MockRMQHandler_Expecter) NewRMQWorker(task interface{}) *MockRMQHandler_NewRMQWorker_Call {
	return &MockRMQHandler_NewRMQWorker_Call{Call: _e.mock.On("NewRMQWorker", task)}
}

func (_c *MockRMQHandler_NewRMQWorker_Call) Run(run func(task rmqworker.WorkerTask)) *MockRMQHandler_NewRMQWorker_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(rmqworker.WorkerTask))
	})
	return _c
}

func (_c *MockRMQHandler_NewRMQWorker_Call) Return(_a0 *rmqworker.RMQWorker, _a1 errs.APIError) *MockRMQHandler_NewRMQWorker_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// SendRMQResponse provides a mock function with given fields: task, errorMsg
func (_m *MockRMQHandler) SendRMQResponse(task *rmqworker.RMQPublishResponseTask, errorMsg ...*constants.APIError) errs.APIError {
	_va := make([]interface{}, len(errorMsg))
	for _i := range errorMsg {
		_va[_i] = errorMsg[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, task)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 errs.APIError
	if rf, ok := ret.Get(0).(func(*rmqworker.RMQPublishResponseTask, ...*constants.APIError) errs.APIError); ok {
		r0 = rf(task, errorMsg...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errs.APIError)
		}
	}

	return r0
}

// MockRMQHandler_SendRMQResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendRMQResponse'
type MockRMQHandler_SendRMQResponse_Call struct {
	*mock.Call
}

// SendRMQResponse is a helper method to define mock.On call
//  - task *rmqworker.RMQPublishResponseTask
//  - errorMsg ...*constants.APIError
func (_e *MockRMQHandler_Expecter) SendRMQResponse(task interface{}, errorMsg ...interface{}) *MockRMQHandler_SendRMQResponse_Call {
	return &MockRMQHandler_SendRMQResponse_Call{Call: _e.mock.On("SendRMQResponse",
		append([]interface{}{task}, errorMsg...)...)}
}

func (_c *MockRMQHandler_SendRMQResponse_Call) Run(run func(task *rmqworker.RMQPublishResponseTask, errorMsg ...*constants.APIError)) *MockRMQHandler_SendRMQResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*constants.APIError, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(*constants.APIError)
			}
		}
		run(args[0].(*rmqworker.RMQPublishResponseTask), variadicArgs...)
	})
	return _c
}

func (_c *MockRMQHandler_SendRMQResponse_Call) Return(_a0 errs.APIError) *MockRMQHandler_SendRMQResponse_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewMockRMQHandler interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockRMQHandler creates a new instance of MockRMQHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockRMQHandler(t mockConstructorTestingTNewMockRMQHandler) *MockRMQHandler {
	mock := &MockRMQHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
